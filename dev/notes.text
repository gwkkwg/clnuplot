;; Should not need to specify the x-coord and y-coord in each sub-plot
(open-plot-in-window
 (let ((plot 
        (make-plot nil nil
                   :xlabel "Iteration"
                   :ylabel "Count of Hats nearly classified as terrorist"
                   :title "Iteration vs. Classification Counts")))
   (make-plot :lines-points
              '(7   5  14  43  67  47 115 284 385  63   1   1   0)
              :legend "Best separation"
              :x-coord nil
              :y-coord #'identity
              :plot plot)
   (make-plot :lines-points
              '(8  16  49  70 103 230 458  98   2   0)
              :legend "Poor separation"
              :x-coord nil
              :y-coord #'identity
              :plot plot)))

;; Also be nice to do above as 
(open-plot-in-window
 (make-plot :lines-points 
            '((7   5  14  43  67  47 115 284 385  63   1   1   0)
              (8  16  49  70 103 230 458  98   2   0))
            :legends '("Best separation"
                       "Poor separation")
            :xlabel "Iteration"
            :ylabel "Count of Hats nearly classified as terrorist"
            :x-coord nil
            :y-coord #'identity
            :title "Iteration vs. Classification Counts"))


sorted-list-container was f*ing ROC curves
list-container means values end up in wrong order!

automatically offset multiple bar graphs...

#+Test
(ccl::do-shell-script
 "/usr/local/bin/gnuplot ~/repository/p2dis/clnuplot/dev/plots/20050524-roc-p-4-4000.data")

(ccl::do-shell-script
 (format nil "/usr/local/bin/gnuplot ~A" 
         (macintosh-path->unix #P"clnuplot:plots;20050524-roc-p-4-4000.data")))

labeling points

multiple roc curves

Support for parameter verification (e.g., boxes fill can be solid, pattern or empty)

Support for optional parameters (e.g., boxes fill solid takes an optional density
                                       argument from 0 to 1)

adding text / extra notes to a plot


	? 	make-plot  &rest args &key name comment filename plotIf you do not supply a plot argument, this creates a new plot object that contains a single data set. If you do supply the plot argument, the data set and it’s information will be added to it.For example, I have a command that first calls make-plot with not data:(make-plot nil nil         :title "Error rate versus F-measure"        :xlabel "Percent Mixing"        :ylabel "F-Measure"))and then later uses the returned plot to build up a number of data-sets:(make-plot :points data        :legend (format nil "Negative ~,2F; Positive ~,2F"                             (getf key :fnr) (getf key :fpr))        :x-coord (lambda (x) (getf x :pm))        :y-coord (lambda (x) (getf x :f))        :plot plot)The final plot object returned contains a whole bunch of data sets.Make-plot currently supports :line, :points and :bar styles. Plots can have titles, a label on the x-axis and the y-axis and custom labels for the legend. Much of the rest of the functionality of GNUplot is missing but the framework is in place to add it pretty easily (I think… I’ll be adding stuff as I need it). Look in the parameters *plot-plot-settings* and *plot-data-set-settings* to get a sense of what setting the plot code knows about.	? 	write-plot This command writes the plot object to its file. Each plot object specifies a host, fullpath (directory) and filename. The host and directory default to *plot-default-host* and *plot-default-directory*. The filename will default to “plot”When you call write-plot it will return the pathname to which the file is written. The file can be executed in GNUPlot (either by piping it from the command line (note bene, I haven’t tried this yet myself) or by using the load command in GNUPlot). The plot commands and data will all be included in this single file.

ok - making it square (for roc)
ok - hiding legend



